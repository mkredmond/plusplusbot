{
  "_args": [
    [
      {
        "raw": "chai-webdriver@^1.2.0",
        "scope": null,
        "escapedName": "chai-webdriver",
        "name": "chai-webdriver",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Mike\\Documents\\dev\\github\\plusplusbot"
    ]
  ],
  "_from": "chai-webdriver@>=1.2.0 <2.0.0",
  "_id": "chai-webdriver@1.2.0",
  "_inCache": true,
  "_location": "/chai-webdriver",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/chai-webdriver-1.2.0.tgz_1460311337963_0.1921588482800871"
  },
  "_npmUser": {
    "name": "goodeggs",
    "email": "open-source@goodeggs.com"
  },
  "_npmVersion": "3.8.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "chai-webdriver@^1.2.0",
    "scope": null,
    "escapedName": "chai-webdriver",
    "name": "chai-webdriver",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/chai-webdriver/-/chai-webdriver-1.2.0.tgz",
  "_shasum": "1b2b2057b92310c9ea1d24c241e3e7e752d40180",
  "_shrinkwrap": null,
  "_spec": "chai-webdriver@^1.2.0",
  "_where": "C:\\Users\\Mike\\Documents\\dev\\github\\plusplusbot",
  "author": {
    "name": "Max Edmands"
  },
  "bugs": {
    "url": "https://github.com/goodeggs/chai-webdriver/issues"
  },
  "dependencies": {
    "string": "^3.0.0",
    "webdriver-sizzle": ">= 0.2.1"
  },
  "description": "Build more expressive integration tests with some webdriver sugar for chai.js",
  "devDependencies": {
    "chai": "^3.0.0",
    "coffee-errors": "^0.8.6",
    "coffee-script": "^1.7.1",
    "mocha": "~1.17.0",
    "phantomjs": "^1.9.7-1",
    "selenium-webdriver": "~2.42.0"
  },
  "directories": {},
  "dist": {
    "shasum": "1b2b2057b92310c9ea1d24c241e3e7e752d40180",
    "tarball": "https://registry.npmjs.org/chai-webdriver/-/chai-webdriver-1.2.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "1330bfaf81f01cb0716450c096ff11f3409766cb",
  "homepage": "https://github.com/goodeggs/chai-webdriver#readme",
  "keywords": [
    "chai",
    "webdriver",
    "integration-tests",
    "chai-plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "demands",
      "email": "me@maxedmands.com"
    },
    {
      "name": "hurrymaplelad",
      "email": "adam@hmlad.com"
    },
    {
      "name": "goodeggs",
      "email": "open-source@goodeggs.com"
    },
    {
      "name": "sylspren",
      "email": "lhuang09@gmail.com"
    },
    {
      "name": "sherrman",
      "email": "sherman.mui@goodeggs.com"
    },
    {
      "name": "benbuckman",
      "email": "ben@benbuckman.net"
    }
  ],
  "name": "chai-webdriver",
  "optionalDependencies": {},
  "peerDependencies": {
    "selenium-webdriver": ">=2.42.0",
    "chai": ">= 1 < 4"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/",
    "always-auth": true
  },
  "readme": "# chai-webdriver [![Build Status](https://travis-ci.org/goodeggs/chai-webdriver.png)](https://travis-ci.org/goodeggs/chai-webdriver) [![Dependency Status](https://david-dm.org/goodeggs/chai-webdriver.png)](https://david-dm.org/goodeggs/chai-webdriver) [![NPM version](https://badge.fury.io/js/chai-webdriver.png)](http://badge.fury.io/js/chai-webdriver)\n\nProvides [selenium-webdriver](https://npmjs.org/package/selenium-webdriver) sugar for the [Chai](http://chaijs.com/) assertion library. Allows you to create expressive integration tests:\n\n```javascript\nexpect('.frequency-field').dom.to.contain.text('One time')\nexpect('.toggle-pane').dom.to.not.be.visible()\n```\n\n## What sorts of assertions can we make?\n\nAll assertions start with a [Sizzle-compatible css selector](http://sizzlejs.com/), for example:\n\n- `expect('.list')`\n- `expect('div > h1')`\n- `expect('a[href=http://google.com]')`\n\nThen we add the dom flag, like so:\n\n- `expect(selector).dom`\n\nFinally, we can add our assertion to the chain.\n\n- `expect(selector).dom.to.have.text('string')` - Test the text value of the dom against supplied string. Exact matches only.\n- `expect(selector).dom.to.contain.text('string')` - Test the text value of the dom against supplied string. Partial matches allowed.\n- `expect(selector).dom.to.match(/regex/)` - Test the text value of the dom against the regular expression.\n- `expect(selector).dom.to.have.text(/regex/)` - Test the text value of the dom against the regular expression. (Same as `match` above).\n- `expect(selector).dom.to.be.visible()` - Check whether or not the element is being rendered\n- `expect(selector).dom.to.be.disabled()` - Check whether or not the form element is disabled\n- `expect(selector).dom.to.have.count(number)` - Test how many elements exist in the dom with the supplied selector\n- `expect(selector).dom.to.have.style('property', 'value')` - Test the CSS style of the element. Exact matches only, unfortunately, for now.\n- `expect(selector).dom.to.have.value('string')` - Test the value of a form field against supplied string.\n- `expect(selector).dom.to.have.htmlClass('warning')` - Tests that the element has `warning` as one of its class attributes.\n- `expect(selector).dom.to.have.attribute('attribute', 'value')` - Test an element's `attribute` against `value` as an exact match. By omitting `value` test simply checks for existance of attribute.\n- `expect(selector).dom.to.have.attribute('attribute', /regex/)` - Test an element's `attribute` against a regular expresssion.\n\nYou can also always add a `not` in there to negate the assertion:\n\n- `expect(selector).dom.not.to.have.style('property', 'value')`\n\n\n### Asynchronous flow\n\nNote that all these assertions are presumed to be *asynchronous* (using selenium-webdriver's promise chain).\nThey can all take callbacks, or be chained with promises. For example:\n\n- `expect(selector).dom.to.have.text('string', function(){...})`\n- `expect(selector).dom.to.have.text('string').then(function(){...})`\n\n\n## Setup\n\nSetup is pretty easy. Just:\n\n```javascript\n\n// Start with a webdriver instance:\nvar sw = require('selenium-webdriver');\nvar driver = new sw.Builder()\n  .withCapabilities(sw.Capabilities.chrome())\n  .build()\n\n// And then...\nvar chai = require('chai');\nvar chaiWebdriver = require('chai-webdriver');\nchai.use(chaiWebdriver(driver));\n\n// And you're good to go!\ndriver.get('http://github.com');\nchai.expect('#site-container h1.heading').dom.to.not.contain.text(\"I'm a kitty!\");\n```\n\n## Contributing\n\nso easy.\n\n```bash\nnpm install           # download the neccesary development dependencies\nnpm run-script build  # compile coffee-script into javascript\nnpm test              # build and run the specs\n```\n\n## License\n\nMIT.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/goodeggs/chai-webdriver.git"
  },
  "scripts": {
    "build": "coffee --bare --compile --output lib/ src/",
    "prepublish": "npm run-script build",
    "pretest": "npm run-script build",
    "test": "mocha --compilers coffee:coffee-script/register spec/*.spec.coffee --reporter=spec"
  },
  "version": "1.2.0"
}
